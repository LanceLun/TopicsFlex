// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EFModels.Models
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityCategory> ActivityCategories { get; set; }
        public virtual DbSet<ActivityImg> ActivityImgs { get; set; }
        public virtual DbSet<ActivityStatus> ActivityStatuses { get; set; }
        public virtual DbSet<AlternateAddress> AlternateAddresses { get; set; }
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<BlackList> BlackLists { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<ColorCategory> ColorCategories { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<CouponCategory> CouponCategories { get; set; }
        public virtual DbSet<CouponSending> CouponSendings { get; set; }
        public virtual DbSet<CustomizedOrder> CustomizedOrders { get; set; }
        public virtual DbSet<CustomizedShoesPo> CustomizedShoesPos { get; set; }
        public virtual DbSet<Customized_material> Customized_materials { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<EcpayOrder> EcpayOrders { get; set; }
        public virtual DbSet<Favorite> Favorites { get; set; }
        public virtual DbSet<JobTitle> JobTitles { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberImg> MemberImgs { get; set; }
        public virtual DbSet<MemberPoint> MemberPoints { get; set; }
        public virtual DbSet<MembershipLevel> MembershipLevels { get; set; }
        public virtual DbSet<OneToOneReservation> OneToOneReservations { get; set; }
        public virtual DbSet<PointHistory> PointHistories { get; set; }
        public virtual DbSet<PointManage> PointManages { get; set; }
        public virtual DbSet<PointTradeIn> PointTradeIns { get; set; }
        public virtual DbSet<Privilege> Privileges { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductComment> ProductComments { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<ProductImg> ProductImgs { get; set; }
        public virtual DbSet<ProductSubCategory> ProductSubCategories { get; set; }
        public virtual DbSet<ProjectTag> ProjectTags { get; set; }
        public virtual DbSet<ProjectTagItem> ProjectTagItems { get; set; }
        public virtual DbSet<ReservationImg> ReservationImgs { get; set; }
        public virtual DbSet<ReservationReview> ReservationReviews { get; set; }
        public virtual DbSet<ReservationStatus> ReservationStatuses { get; set; }
        public virtual DbSet<Return> Returns { get; set; }
        public virtual DbSet<ReturnReson> ReturnResons { get; set; }
        public virtual DbSet<SalesCategory> SalesCategories { get; set; }
        public virtual DbSet<ShoesCategory> ShoesCategories { get; set; }
        public virtual DbSet<ShoesChoose> ShoesChooses { get; set; }
        public virtual DbSet<ShoesColorCategory> ShoesColorCategories { get; set; }
        public virtual DbSet<ShoesGroup> ShoesGroups { get; set; }
        public virtual DbSet<ShoesOrder> ShoesOrders { get; set; }
        public virtual DbSet<ShoesPicture> ShoesPictures { get; set; }
        public virtual DbSet<ShoesSize> ShoesSizes { get; set; }
        public virtual DbSet<ShoppingCart> ShoppingCarts { get; set; }
        public virtual DbSet<SizeCategory> SizeCategories { get; set; }
        public virtual DbSet<Speaker> Speakers { get; set; }
        public virtual DbSet<SpeakerField> SpeakerFields { get; set; }
        public virtual DbSet<Staff> Staffs { get; set; }
        public virtual DbSet<StaffPermission> StaffPermissions { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<logistics_company> logistics_companies { get; set; }
        public virtual DbSet<order> orders { get; set; }
        public virtual DbSet<orderItem> orderItems { get; set; }
        public virtual DbSet<order_status> order_statuses { get; set; }
        public virtual DbSet<pay_method> pay_methods { get; set; }
        public virtual DbSet<pay_status> pay_statuses { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=Flex;User ID=sa5;Password=sa5");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Activity>(entity =>
            {
                entity.Property(e => e.ActivityBookEndTime).HasColumnType("datetime");

                entity.Property(e => e.ActivityBookStartTime).HasColumnType("datetime");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityDescription).HasMaxLength(300);

                entity.Property(e => e.ActivityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActivityPlace)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fk_ActivityStatusId).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fk_ActivityCategory)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.fk_ActivityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Ac__3D2915A8");

                entity.HasOne(d => d.fk_ActivityStatus)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.fk_ActivityStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Ac__3E1D39E1");

                entity.HasOne(d => d.fk_Speaker)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.fk_SpeakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Sp__3F115E1A");
            });

            modelBuilder.Entity<ActivityCategory>(entity =>
            {
                entity.Property(e => e.ActivityCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityImg>(entity =>
            {
                entity.ToTable("ActivityImg");

                entity.Property(e => e.ImgPath)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.fk_Activity)
                    .WithMany(p => p.ActivityImgs)
                    .HasForeignKey(d => d.fk_ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ActivityI__fk_Ac__5D95E53A");
            });

            modelBuilder.Entity<ActivityStatus>(entity =>
            {
                entity.HasIndex(e => e.ActivityStatusDescription, "UQ__Activity__732635EC869748DF")
                    .IsUnique();

                entity.Property(e => e.ActivityStatusDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<AlternateAddress>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("PK__Alternat__091C2AFBD3B2ED1E");

                entity.HasIndex(e => e.fk_MemberId, "UQ__Alternat__3B54230C0458ABB6")
                    .IsUnique();

                entity.Property(e => e.AlternateAddress1).HasMaxLength(300);

                entity.Property(e => e.AlternateAddress2).HasMaxLength(300);

                entity.HasOne(d => d.fk_Member)
                    .WithOne(p => p.AlternateAddress)
                    .HasForeignKey<AlternateAddress>(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Alternate__fk_Me__3D2915A8");
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.Property(e => e.Author).HasMaxLength(500);

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.PublishTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<BlackList>(entity =>
            {
                entity.Property(e => e.Behavior)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Branch>(entity =>
            {
                entity.HasIndex(e => e.BranchName, "UQ__Branches__3903DB0333823C4F")
                    .IsUnique();

                entity.HasIndex(e => e.BranchAddress, "UQ__Branches__F50DE17A2F807D2E")
                    .IsUnique();

                entity.Property(e => e.BranchAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(700);

                entity.HasOne(d => d.fk_Card)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.fk_CardId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItem_CartItem");

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.fk_ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_ProductGroups");
            });

            modelBuilder.Entity<ColorCategory>(entity =>
            {
                entity.HasKey(e => e.ColorId)
                    .HasName("PK_ColorCategory");

                entity.Property(e => e.ColorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Coupon>(entity =>
            {
                entity.Property(e => e.CouponCode).HasMaxLength(50);

                entity.Property(e => e.CouponDescription).HasMaxLength(100);

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fk_CouponCategory)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.fk_CouponCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupon_CouponCategory");

                entity.HasOne(d => d.fk_RequiredProjectTag)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.fk_RequiredProjectTagID)
                    .HasConstraintName("FK_Coupon_ProjectTag");
            });

            modelBuilder.Entity<CouponCategory>(entity =>
            {
                entity.Property(e => e.CouponCategoryId).ValueGeneratedNever();

                entity.Property(e => e.CouponCategoryName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CouponSending>(entity =>
            {
                entity.HasKey(e => e.SendingId)
                    .HasName("PK_CouponSending");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.RedeemedDate).HasColumnType("datetime");

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.fk_Coupon)
                    .WithMany(p => p.CouponSendings)
                    .HasForeignKey(d => d.fk_CouponId)
                    .HasConstraintName("FK_CouponSending_Coupon");

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.CouponSendings)
                    .HasForeignKey(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_CouponSendings_Members");
            });

            modelBuilder.Entity<CustomizedOrder>(entity =>
            {
                entity.HasKey(e => e.Customized_Id)
                    .HasName("PK__Customiz__AFADABDD62D38FD0");

                entity.Property(e => e.Customized_number)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.OrderCreateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderEditTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(254);

                entity.HasOne(d => d.Customized_EdgeProtectionNavigation)
                    .WithMany(p => p.CustomizedOrderCustomized_EdgeProtectionNavigations)
                    .HasForeignKey(d => d.Customized_EdgeProtection)
                    .HasConstraintName("FK__Customize__Custo__671F4F74");

                entity.HasOne(d => d.Customized_EyeletNavigation)
                    .WithMany(p => p.CustomizedOrderCustomized_EyeletNavigations)
                    .HasForeignKey(d => d.Customized_Eyelet)
                    .HasConstraintName("FK__Customize__Custo__662B2B3B");

                entity.HasOne(d => d.Customized_RearNavigation)
                    .WithMany(p => p.CustomizedOrderCustomized_RearNavigations)
                    .HasForeignKey(d => d.Customized_Rear)
                    .HasConstraintName("FK__Customize__Custo__681373AD");

                entity.HasOne(d => d.Customized_Shoes)
                    .WithMany(p => p.CustomizedOrders)
                    .HasForeignKey(d => d.Customized_Shoes_Id)
                    .HasConstraintName("FK__Customize__Custo__46B27FE2");

                entity.HasOne(d => d.Customized_ToeNavigation)
                    .WithMany(p => p.CustomizedOrderCustomized_ToeNavigations)
                    .HasForeignKey(d => d.Customized_Toe)
                    .HasConstraintName("FK__Customize__Custo__69FBBC1F");

                entity.HasOne(d => d.Customized_TongueNavigation)
                    .WithMany(p => p.CustomizedOrderCustomized_TongueNavigations)
                    .HasForeignKey(d => d.Customized_Tongue)
                    .HasConstraintName("FK__Customize__Custo__690797E6");

                entity.HasOne(d => d.Fk_ForMemberCustomized)
                    .WithMany(p => p.CustomizedOrders)
                    .HasForeignKey(d => d.Fk_ForMemberCustomized_Id)
                    .HasConstraintName("FK_CustomizedOrders_Members");
            });

            modelBuilder.Entity<CustomizedShoesPo>(entity =>
            {
                entity.HasKey(e => e.ShoesProductId)
                    .HasName("PK__Customiz__D7D2FD91792B994F");

                entity.ToTable("CustomizedShoesPo");

                entity.Property(e => e.DataCreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataEditTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ShoesDescription).HasMaxLength(254);

                entity.Property(e => e.ShoesName)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.Property(e => e.ShoesOrigin).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.HasOne(d => d.fk_ShoesCategory)
                    .WithMany(p => p.CustomizedShoesPos)
                    .HasForeignKey(d => d.fk_ShoesCategoryId)
                    .HasConstraintName("FK__Customize__fk_Sh__44CA3770");

                entity.HasOne(d => d.fk_ShoesColor)
                    .WithMany(p => p.CustomizedShoesPos)
                    .HasForeignKey(d => d.fk_ShoesColorId)
                    .HasConstraintName("FK__Customize__fk_Sh__45BE5BA9");
            });

            modelBuilder.Entity<Customized_material>(entity =>
            {
                entity.HasKey(e => e.Shoesmaterial_Id)
                    .HasName("PK__Customiz__06EFE12DEAAAE247");

                entity.Property(e => e.material_Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.DepartmentName).HasMaxLength(50);
            });

            modelBuilder.Entity<Discount>(entity =>
            {
                entity.Property(e => e.DiscountDescription).HasMaxLength(100);

                entity.Property(e => e.DiscountName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fk_ProjectTag)
                    .WithMany(p => p.Discounts)
                    .HasForeignKey(d => d.fk_ProjectTagId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Discount_DiscountGroup");
            });

            modelBuilder.Entity<EcpayOrder>(entity =>
            {
                entity.HasKey(e => e.MerchantTradeNo)
                    .HasName("PK__EcpayOrd__D63119100B4C8D7A");

                entity.Property(e => e.MerchantTradeNo).HasMaxLength(50);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PaymentTypeChargeFee).HasMaxLength(50);

                entity.Property(e => e.RtnMsg).HasMaxLength(50);

                entity.Property(e => e.TradeDate).HasMaxLength(50);

                entity.Property(e => e.TradeDesc).HasMaxLength(300);

                entity.Property(e => e.TradeNo).HasMaxLength(50);

                entity.HasOne(d => d.fk_type)
                    .WithMany(p => p.EcpayOrders)
                    .HasForeignKey(d => d.fk_typeId)
                    .HasConstraintName("FK_EcpayOrders_Type");
            });

            modelBuilder.Entity<Favorite>(entity =>
            {
                entity.Property(e => e.fk_productId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_member)
                    .WithMany(p => p.Favorites)
                    .HasForeignKey(d => d.fk_memberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Favorites_Members");

                entity.HasOne(d => d.fk_product)
                    .WithMany(p => p.Favorites)
                    .HasForeignKey(d => d.fk_productId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Favorites_Products");
            });

            modelBuilder.Entity<JobTitle>(entity =>
            {
                entity.HasKey(e => e.TitleId)
                    .HasName("PK__JobTitle__75758986DFA010AD");

                entity.HasIndex(e => e.TitleName, "UQ__JobTitle__252BE89C516695E0")
                    .IsUnique();

                entity.Property(e => e.TitleName).HasMaxLength(50);
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasIndex(e => e.Mobile, "UQ__Members__6FAE0782E1A56EB7")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "UQ__Members__A9D1053442354E1D")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "UQ__Members__B0C3AC46ED2152FF")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unique')");

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.CommonAddress).HasMaxLength(100);

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasDefaultValueSql("(N'unique')");

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unique')");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Registration)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.fk_BlackList)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.fk_BlackListId)
                    .HasConstraintName("FK__Members__fk_Blac__503BEA1C");

                entity.HasOne(d => d.fk_Level)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.fk_LevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Members__fk_Leve__00DF2177");
            });

            modelBuilder.Entity<MemberImg>(entity =>
            {
                entity.ToTable("MemberImg");

                entity.Property(e => e.ImgPath)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.HasOne(d => d.fk_member)
                    .WithMany(p => p.MemberImgs)
                    .HasForeignKey(d => d.fk_memberId)
                    .HasConstraintName("FK_MemberImg_Members");
            });

            modelBuilder.Entity<MemberPoint>(entity =>
            {
                entity.HasKey(e => e.MemberPointsId)
                    .HasName("PK__MemberPo__8D672C97D8EFE351");

                entity.HasIndex(e => e.fk_MemberId, "UQ__MemberPo__3B54230C8C81DA21")
                    .IsUnique();

                entity.HasOne(d => d.fk_Member)
                    .WithOne(p => p.MemberPoint)
                    .HasForeignKey<MemberPoint>(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberPoi__fk_Me__4E53A1AA");
            });

            modelBuilder.Entity<MembershipLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("PK__Membersh__09F03C26F7CA5148");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MinSpending)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasMany(d => d.fk_Privileges)
                    .WithMany(p => p.fk_Levels)
                    .UsingEntity<Dictionary<string, object>>(
                        "MembershipLevelPrivilege",
                        l => l.HasOne<Privilege>().WithMany().HasForeignKey("fk_PrivilegeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Membershi__fk_Pr__531856C7"),
                        r => r.HasOne<MembershipLevel>().WithMany().HasForeignKey("fk_LevelId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Membershi__fk_Le__01D345B0"),
                        j =>
                        {
                            j.HasKey("fk_LevelId", "fk_PrivilegeId").HasName("PK__Membersh__580C8EAAFF14C4F1");

                            j.ToTable("MembershipLevelPrivileges");
                        });
            });

            modelBuilder.Entity<OneToOneReservation>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK__OneToOne__B7EE5F24F1A028EC");

                entity.Property(e => e.ReservationCreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReservationEndTime).HasColumnType("datetime");

                entity.Property(e => e.ReservationStartTime).HasColumnType("datetime");

                entity.HasOne(d => d.fk_Booker)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_BookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OneToOneReservations_Members");

                entity.HasOne(d => d.fk_Branch)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_BranchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Br__7755B73D");

                entity.HasOne(d => d.fk_ReservationSpeaker)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_ReservationSpeakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Re__7849DB76");

                entity.HasOne(d => d.fk_ReservationStatus)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_ReservationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Re__793DFFAF");
            });

            modelBuilder.Entity<PointHistory>(entity =>
            {
                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_MemberId)
                    .HasConstraintName("FK__PointHist__fk_Me__03BB8E22");

                entity.HasOne(d => d.fk_MemberPoints)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_MemberPointsId)
                    .HasConstraintName("FK_PointHistories_MemberPoints");

                entity.HasOne(d => d.fk_Order)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_OrderId)
                    .HasConstraintName("FK_PointHistories_orders");

                entity.HasOne(d => d.fk_Type)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_TypeId)
                    .HasConstraintName("FK_PointHistories_Type");
            });

            modelBuilder.Entity<PointManage>(entity =>
            {
                entity.ToTable("PointManage");

                entity.Property(e => e.PointExpirationDate).HasColumnType("datetime");

                entity.HasOne(d => d.fk_Type)
                    .WithMany(p => p.PointManages)
                    .HasForeignKey(d => d.fk_TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointManage_Type");
            });

            modelBuilder.Entity<PointTradeIn>(entity =>
            {
                entity.ToTable("PointTradeIn");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.GetPoints)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GiftThreshold)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MaxGetPoints)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.PointTradeIns)
                    .HasForeignKey(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointTradeIn_Members");

                entity.HasOne(d => d.fk_Order)
                    .WithMany(p => p.PointTradeIns)
                    .HasForeignKey(d => d.fk_OrderId)
                    .HasConstraintName("FK_PointTradeIn_orders");
            });

            modelBuilder.Entity<Privilege>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.PrivilegeName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.ProductId)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unique')");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EditTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription).IsRequired();

                entity.Property(e => e.ProductMaterial).HasMaxLength(50);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.Property(e => e.ProductOrigin)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.Tag).HasMaxLength(100);

                entity.HasOne(d => d.fk_ProductSubCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.fk_ProductSubCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_ProductSubCategory");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.Property(e => e.CategoryPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.fk_SalesCategory)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.fk_SalesCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategories_SalesCategories");
            });

            modelBuilder.Entity<ProductComment>(entity =>
            {
                entity.ToTable("ProductComment");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.ProductComments)
                    .HasForeignKey(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductComment_Members");

                entity.HasOne(d => d.fk_ProductGroup)
                    .WithMany(p => p.ProductComments)
                    .HasForeignKey(d => d.fk_ProductGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductComment_ProductGroups");
            });

            modelBuilder.Entity<ProductGroup>(entity =>
            {
                entity.Property(e => e.fk_ProductId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Color)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.fk_ColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_ColorCategories");

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.fk_ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_Products");

                entity.HasOne(d => d.fk_Size)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.fk_SizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_SizeCategories");
            });

            modelBuilder.Entity<ProductImg>(entity =>
            {
                entity.Property(e => e.ImgPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fk_ProductId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Color)
                    .WithMany(p => p.ProductImgs)
                    .HasForeignKey(d => d.fk_ColorId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_ProductImgs_ColorCategories");

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.ProductImgs)
                    .HasForeignKey(d => d.fk_ProductId)
                    .HasConstraintName("FK_ProductImgs_Products");
            });

            modelBuilder.Entity<ProductSubCategory>(entity =>
            {
                entity.Property(e => e.ProductSubCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubCategoryPath)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.fk_ProductCategory)
                    .WithMany(p => p.ProductSubCategories)
                    .HasForeignKey(d => d.fk_ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSubCategories_ProductCategories");
            });

            modelBuilder.Entity<ProjectTag>(entity =>
            {
                entity.Property(e => e.CreateAt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");

                entity.Property(e => e.ProjectTagName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ProjectTagItem>(entity =>
            {
                entity.HasKey(e => new { e.fk_ProjectTagId, e.fk_ProductId })
                    .HasName("PK_discount_group_item");

                entity.Property(e => e.fk_ProductId)
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.ProjectTagItems)
                    .HasForeignKey(d => d.fk_ProductId)
                    .HasConstraintName("FK_discount_group_item_discount_group");
            });

            modelBuilder.Entity<ReservationImg>(entity =>
            {
                entity.ToTable("ReservationImg");

                entity.Property(e => e.ImgPath)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<ReservationReview>(entity =>
            {
                entity.Property(e => e.content).IsRequired();

                entity.Property(e => e.creationTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.fk_member)
                    .WithMany(p => p.ReservationReviews)
                    .HasForeignKey(d => d.fk_memberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Reservati__fk_me__17C286CF");

                entity.HasOne(d => d.fk_speaker)
                    .WithMany(p => p.ReservationReviews)
                    .HasForeignKey(d => d.fk_speakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Reservati__fk_sp__18B6AB08");
            });

            modelBuilder.Entity<ReservationStatus>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK__Reservat__B7EE5F24FD1E2455");

                entity.HasIndex(e => e.ReservationStatusDescription, "UQ__Reservat__ADF40EA6BC1BF8BF")
                    .IsUnique();

                entity.Property(e => e.ReservationId).ValueGeneratedNever();

                entity.Property(e => e.ReservationStatusDescription)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Return>(entity =>
            {
                entity.Property(e => e.退貨日期).HasColumnType("datetime");

                entity.Property(e => e.退貨轉帳帳號).HasMaxLength(50);

                entity.HasOne(d => d.fk訂單Navigation)
                    .WithMany(p => p.Returns)
                    .HasForeignKey(d => d.fk訂單)
                    .HasConstraintName("FK_Returns_orders");

                entity.HasOne(d => d.退貨理由Navigation)
                    .WithMany(p => p.Returns)
                    .HasForeignKey(d => d.退貨理由)
                    .HasConstraintName("FK_Returns_ReturnResons");
            });

            modelBuilder.Entity<ReturnReson>(entity =>
            {
                entity.Property(e => e.退貨理由)
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SalesCategory>(entity =>
            {
                entity.Property(e => e.SalesCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesCategory>(entity =>
            {
                entity.Property(e => e.ShoesCategoryName)
                    .IsRequired()
                    .HasMaxLength(254);
            });

            modelBuilder.Entity<ShoesChoose>(entity =>
            {
                entity.HasKey(e => e.OptionId);

                entity.Property(e => e.OptinName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesColorCategory>(entity =>
            {
                entity.HasKey(e => e.ShoesColorId)
                    .HasName("PK__ShoesCol__BB1469D44CC26480");

                entity.Property(e => e.ColorCode).HasMaxLength(100);

                entity.Property(e => e.ColorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesGroup>(entity =>
            {
                entity.Property(e => e.fk_CustomerOrderId)
                    .IsRequired()
                    .HasMaxLength(40);

                entity.HasOne(d => d.fk_CustomerOrder)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_CustomerOrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesOrders");

                entity.HasOne(d => d.fk_Material)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_Customized_materials");

                entity.HasOne(d => d.fk_Option)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_OptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesChooses");

                entity.HasOne(d => d.fk_ShoesColor)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_ShoesColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesColorCategories");

                entity.HasOne(d => d.fk_ShoesMain)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_ShoesMainId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_CustomizedShoesPo");
            });

            modelBuilder.Entity<ShoesOrder>(entity =>
            {
                entity.Property(e => e.ShoesOrderId).HasMaxLength(40);

                entity.Property(e => e.Remark).HasMaxLength(300);

                entity.HasOne(d => d.fk_ShoesSize)
                    .WithMany(p => p.ShoesOrders)
                    .HasForeignKey(d => d.fk_ShoesSizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ShoesOrde__Remar__12FDD1B2");
            });

            modelBuilder.Entity<ShoesPicture>(entity =>
            {
                entity.HasKey(e => e.ShoesPicture_Id)
                    .HasName("PK__ShoesPic__DF35EBA4F267894B");

                entity.Property(e => e.ShoesPictureUrl).HasMaxLength(4000);

                entity.HasOne(d => d.fk_ShoesPictureProduct)
                    .WithMany(p => p.ShoesPictures)
                    .HasForeignKey(d => d.fk_ShoesPictureProduct_Id)
                    .HasConstraintName("FK__ShoesPict__fk_Sh__70A8B9AE");
            });

            modelBuilder.Entity<ShoesSize>(entity =>
            {
                entity.HasKey(e => e.SizeId)
                    .HasName("PK__ShoesSiz__83BD097A5A8C5687");

                entity.Property(e => e.SizeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoppingCart>(entity =>
            {
                entity.HasKey(e => e.CartId)
                    .HasName("PK_ShoppingCart");

                entity.Property(e => e.CartItemsId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.ShoppingCarts)
                    .HasForeignKey(d => d.fk_MemberID)
                    .HasConstraintName("FK_ShoppingCarts_Members");
            });

            modelBuilder.Entity<SizeCategory>(entity =>
            {
                entity.HasKey(e => e.SizeId);

                entity.Property(e => e.SizeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Speaker>(entity =>
            {
                entity.Property(e => e.SpeakerDescription).HasMaxLength(500);

                entity.Property(e => e.SpeakerImg)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SpeakerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpeakerPhone)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_SpeakerBranch)
                    .WithMany(p => p.Speakers)
                    .HasForeignKey(d => d.fk_SpeakerBranchId)
                    .HasConstraintName("FK__Speakers__fk_Spe__2334397B");

                entity.HasOne(d => d.fk_SpeakerField)
                    .WithMany(p => p.Speakers)
                    .HasForeignKey(d => d.fk_SpeakerFieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Speakers__fk_Spe__24285DB4");
            });

            modelBuilder.Entity<SpeakerField>(entity =>
            {
                entity.HasKey(e => e.FieldId)
                    .HasName("PK__SpeakerF__C8B6FF0732CB4F1E");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Department)
                    .WithMany(p => p.Staff)
                    .HasForeignKey(d => d.fk_DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Depar__74794A92");

                entity.HasOne(d => d.fk_Permissions)
                    .WithMany(p => p.Staff)
                    .HasForeignKey(d => d.fk_PermissionsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Permi__756D6ECB");

                entity.HasOne(d => d.fk_Title)
                    .WithMany(p => p.Staff)
                    .HasForeignKey(d => d.fk_TitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Title__76619304");
            });

            modelBuilder.Entity<StaffPermission>(entity =>
            {
                entity.HasKey(e => e.PermissionsId)
                    .HasName("PK__StaffPer__1EDAF9A81349059A");

                entity.HasIndex(e => e.LevelName, "UQ__StaffPer__9EF3BE7B6829F02D")
                    .IsUnique();

                entity.Property(e => e.LevelName).HasMaxLength(30);
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasIndex(e => e.SupplierCompanyNumber, "UQ__Supplier__AE8E9B4177059568")
                    .IsUnique();

                entity.Property(e => e.SupplierCompanyAddress).HasMaxLength(250);

                entity.Property(e => e.SupplierCompanyEmail).HasMaxLength(250);

                entity.Property(e => e.SupplierCompanyName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierStartDate).HasColumnType("datetime");

                entity.Property(e => e.Supply_Material).HasMaxLength(50);
            });

            modelBuilder.Entity<Type>(entity =>
            {
                entity.ToTable("Type");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<logistics_company>(entity =>
            {
                entity.Property(e => e.logistics_description).HasMaxLength(50);

                entity.Property(e => e.name).HasMaxLength(50);

                entity.Property(e => e.tel)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<order>(entity =>
            {
                entity.Property(e => e.bill_address).HasMaxLength(50);

                entity.Property(e => e.bill_cellphone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.biller).HasMaxLength(50);

                entity.Property(e => e.cellphone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.close_time).HasColumnType("datetime");

                entity.Property(e => e.coupon_name).HasMaxLength(50);

                entity.Property(e => e.orderCode).HasMaxLength(50);

                entity.Property(e => e.order_description).HasMaxLength(50);

                entity.Property(e => e.ordertime).HasColumnType("datetime");

                entity.Property(e => e.receipt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.receiver).HasMaxLength(50);

                entity.Property(e => e.recipient_address).HasMaxLength(50);

                entity.HasOne(d => d.fk_member)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.fk_member_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__fk_membe__5BAD9CC8");

                entity.HasOne(d => d.fk_type)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.fk_typeId)
                    .HasConstraintName("FK_orders_Type");

                entity.HasOne(d => d.logistics_company)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.logistics_company_Id)
                    .HasConstraintName("FK__orders__logistic__5BAD9CC8");

                entity.HasOne(d => d.order_status)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.order_status_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__order_st__5CA1C101");

                entity.HasOne(d => d.pay_method)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.pay_method_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__pay_meth__5D95E53A");

                entity.HasOne(d => d.pay_status)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.pay_status_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__pay_stat__5E8A0973");
            });

            modelBuilder.Entity<orderItem>(entity =>
            {
                entity.Property(e => e.Items_description).HasMaxLength(50);

                entity.Property(e => e.discount_name).HasMaxLength(50);

                entity.Property(e => e.product_name).HasMaxLength(50);

                entity.HasOne(d => d.fk_type)
                    .WithMany(p => p.orderItems)
                    .HasForeignKey(d => d.fk_typeId)
                    .HasConstraintName("FK_orderItems_Type");

                entity.HasOne(d => d.order)
                    .WithMany(p => p.orderItems)
                    .HasForeignKey(d => d.order_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orderItem__order__1B9317B3");
            });

            modelBuilder.Entity<order_status>(entity =>
            {
                entity.Property(e => e.order_status1)
                    .HasMaxLength(50)
                    .HasColumnName("order_status");
            });

            modelBuilder.Entity<pay_method>(entity =>
            {
                entity.Property(e => e.pay_method1)
                    .HasMaxLength(50)
                    .HasColumnName("pay_method");
            });

            modelBuilder.Entity<pay_status>(entity =>
            {
                entity.Property(e => e.pay_status1)
                    .HasMaxLength(50)
                    .HasColumnName("pay_status");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}